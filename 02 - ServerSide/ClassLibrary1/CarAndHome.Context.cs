//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CarIsYourHome
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CarAndHomeEntities : DbContext
    {
        public CarAndHomeEntities()
            : base("name=CarAndHomeEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Branch> Branches { get; set; }
        public virtual DbSet<Cars_List> Cars_Lists { get; set; }
        public virtual DbSet<Cars_Type> Cars_Types { get; set; }
        public virtual DbSet<Rented_Car> Rented_Cars { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<AllAutoCar> AllAutoCars { get; set; }
        public virtual DbSet<AllCarRented> AllCarRenteds { get; set; }
        public virtual DbSet<AllCarType> AllCarTypes { get; set; }
        public virtual DbSet<AllClient> AllClients { get; set; }
        public virtual DbSet<AllEmployee> AllEmployees { get; set; }
        public virtual DbSet<AllManualCar> AllManualCars { get; set; }
        public virtual DbSet<AllUser> AllUsers { get; set; }
        public virtual DbSet<NotReturnedCar> NotReturnedCars { get; set; }
    
        public virtual int AddBranch(string address, Nullable<decimal> longtitude, Nullable<decimal> altitude, string name)
        {
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var longtitudeParameter = longtitude.HasValue ?
                new ObjectParameter("longtitude", longtitude) :
                new ObjectParameter("longtitude", typeof(decimal));
    
            var altitudeParameter = altitude.HasValue ?
                new ObjectParameter("altitude", altitude) :
                new ObjectParameter("altitude", typeof(decimal));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddBranch", addressParameter, longtitudeParameter, altitudeParameter, nameParameter);
        }
    
        public virtual int AddCarRent(Nullable<int> carid, string licenseplate, Nullable<System.DateTime> rentstart, Nullable<System.DateTime> rentreturn, Nullable<System.DateTime> actualreturn, Nullable<int> userid)
        {
            var caridParameter = carid.HasValue ?
                new ObjectParameter("carid", carid) :
                new ObjectParameter("carid", typeof(int));
    
            var licenseplateParameter = licenseplate != null ?
                new ObjectParameter("licenseplate", licenseplate) :
                new ObjectParameter("licenseplate", typeof(string));
    
            var rentstartParameter = rentstart.HasValue ?
                new ObjectParameter("rentstart", rentstart) :
                new ObjectParameter("rentstart", typeof(System.DateTime));
    
            var rentreturnParameter = rentreturn.HasValue ?
                new ObjectParameter("rentreturn", rentreturn) :
                new ObjectParameter("rentreturn", typeof(System.DateTime));
    
            var actualreturnParameter = actualreturn.HasValue ?
                new ObjectParameter("actualreturn", actualreturn) :
                new ObjectParameter("actualreturn", typeof(System.DateTime));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddCarRent", caridParameter, licenseplateParameter, rentstartParameter, rentreturnParameter, actualreturnParameter, useridParameter);
        }
    
        public virtual int AddCarToCarList(Nullable<int> typeid, string licenseplate, Nullable<decimal> mileage, string status, string available, string address)
        {
            var typeidParameter = typeid.HasValue ?
                new ObjectParameter("typeid", typeid) :
                new ObjectParameter("typeid", typeof(int));
    
            var licenseplateParameter = licenseplate != null ?
                new ObjectParameter("licenseplate", licenseplate) :
                new ObjectParameter("licenseplate", typeof(string));
    
            var mileageParameter = mileage.HasValue ?
                new ObjectParameter("mileage", mileage) :
                new ObjectParameter("mileage", typeof(decimal));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var availableParameter = available != null ?
                new ObjectParameter("available", available) :
                new ObjectParameter("available", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddCarToCarList", typeidParameter, licenseplateParameter, mileageParameter, statusParameter, availableParameter, addressParameter);
        }
    
        public virtual int AddCarType(string manufacture, string model, Nullable<decimal> dailycost, Nullable<decimal> dailydelaycost, Nullable<int> year, string transmission)
        {
            var manufactureParameter = manufacture != null ?
                new ObjectParameter("manufacture", manufacture) :
                new ObjectParameter("manufacture", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("model", model) :
                new ObjectParameter("model", typeof(string));
    
            var dailycostParameter = dailycost.HasValue ?
                new ObjectParameter("dailycost", dailycost) :
                new ObjectParameter("dailycost", typeof(decimal));
    
            var dailydelaycostParameter = dailydelaycost.HasValue ?
                new ObjectParameter("dailydelaycost", dailydelaycost) :
                new ObjectParameter("dailydelaycost", typeof(decimal));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var transmissionParameter = transmission != null ?
                new ObjectParameter("transmission", transmission) :
                new ObjectParameter("transmission", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddCarType", manufactureParameter, modelParameter, dailycostParameter, dailydelaycostParameter, yearParameter, transmissionParameter);
        }
    
        public virtual int AddUser(string fullname, string username, string id, Nullable<System.DateTime> birthdate, string gender, string email, string password, string descriotion)
        {
            var fullnameParameter = fullname != null ?
                new ObjectParameter("fullname", fullname) :
                new ObjectParameter("fullname", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            var birthdateParameter = birthdate.HasValue ?
                new ObjectParameter("birthdate", birthdate) :
                new ObjectParameter("birthdate", typeof(System.DateTime));
    
            var genderParameter = gender != null ?
                new ObjectParameter("gender", gender) :
                new ObjectParameter("gender", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var descriotionParameter = descriotion != null ?
                new ObjectParameter("descriotion", descriotion) :
                new ObjectParameter("descriotion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUser", fullnameParameter, usernameParameter, idParameter, birthdateParameter, genderParameter, emailParameter, passwordParameter, descriotionParameter);
        }
    
        public virtual ObjectResult<AllCarDetails_Result> AllCarDetails(Nullable<int> carid)
        {
            var caridParameter = carid.HasValue ?
                new ObjectParameter("carid", carid) :
                new ObjectParameter("carid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AllCarDetails_Result>("AllCarDetails", caridParameter);
        }
    
        public virtual ObjectResult<CheckAvailabiltyById_Result> CheckAvailabiltyById(Nullable<int> carid)
        {
            var caridParameter = carid.HasValue ?
                new ObjectParameter("carid", carid) :
                new ObjectParameter("carid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CheckAvailabiltyById_Result>("CheckAvailabiltyById", caridParameter);
        }
    
        public virtual int DeleteCarFromCarsList(Nullable<int> carid)
        {
            var caridParameter = carid.HasValue ?
                new ObjectParameter("carid", carid) :
                new ObjectParameter("carid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCarFromCarsList", caridParameter);
        }
    
        public virtual int DeleteClient(Nullable<int> userid)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteClient", useridParameter);
        }
    
        public virtual int DeleteEmployee(Nullable<int> userid)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteEmployee", useridParameter);
        }
    
        public virtual int DeleteRentedCar(Nullable<int> carid)
        {
            var caridParameter = carid.HasValue ?
                new ObjectParameter("carid", carid) :
                new ObjectParameter("carid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteRentedCar", caridParameter);
        }
    
        public virtual int DeleteType(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteType", idParameter);
        }
    
        public virtual ObjectResult<GetClientById_Result> GetClientById(Nullable<int> userid)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetClientById_Result>("GetClientById", useridParameter);
        }
    
        public virtual ObjectResult<GetEmployeeById_Result> GetEmployeeById(Nullable<int> userid)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeById_Result>("GetEmployeeById", useridParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int UpdateActualRerturnDateCar(Nullable<int> carid, Nullable<System.DateTime> actualreturndate)
        {
            var caridParameter = carid.HasValue ?
                new ObjectParameter("carid", carid) :
                new ObjectParameter("carid", typeof(int));
    
            var actualreturndateParameter = actualreturndate.HasValue ?
                new ObjectParameter("actualreturndate", actualreturndate) :
                new ObjectParameter("actualreturndate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateActualRerturnDateCar", caridParameter, actualreturndateParameter);
        }
    
        public virtual int UpdateCarsList(Nullable<int> carid, Nullable<int> typeid, string licenseplate, Nullable<decimal> mileage, string status, string available, Nullable<int> branchid)
        {
            var caridParameter = carid.HasValue ?
                new ObjectParameter("carid", carid) :
                new ObjectParameter("carid", typeof(int));
    
            var typeidParameter = typeid.HasValue ?
                new ObjectParameter("typeid", typeid) :
                new ObjectParameter("typeid", typeof(int));
    
            var licenseplateParameter = licenseplate != null ?
                new ObjectParameter("licenseplate", licenseplate) :
                new ObjectParameter("licenseplate", typeof(string));
    
            var mileageParameter = mileage.HasValue ?
                new ObjectParameter("mileage", mileage) :
                new ObjectParameter("mileage", typeof(decimal));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var availableParameter = available != null ?
                new ObjectParameter("available", available) :
                new ObjectParameter("available", typeof(string));
    
            var branchidParameter = branchid.HasValue ?
                new ObjectParameter("branchid", branchid) :
                new ObjectParameter("branchid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCarsList", caridParameter, typeidParameter, licenseplateParameter, mileageParameter, statusParameter, availableParameter, branchidParameter);
        }
    
        public virtual int UpdateCarType(Nullable<int> id, string manufacture, string model, Nullable<decimal> dailycost, Nullable<decimal> dailydelaycost, Nullable<int> year, string tranmission)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var manufactureParameter = manufacture != null ?
                new ObjectParameter("manufacture", manufacture) :
                new ObjectParameter("manufacture", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("model", model) :
                new ObjectParameter("model", typeof(string));
    
            var dailycostParameter = dailycost.HasValue ?
                new ObjectParameter("dailycost", dailycost) :
                new ObjectParameter("dailycost", typeof(decimal));
    
            var dailydelaycostParameter = dailydelaycost.HasValue ?
                new ObjectParameter("dailydelaycost", dailydelaycost) :
                new ObjectParameter("dailydelaycost", typeof(decimal));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var tranmissionParameter = tranmission != null ?
                new ObjectParameter("tranmission", tranmission) :
                new ObjectParameter("tranmission", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCarType", idParameter, manufactureParameter, modelParameter, dailycostParameter, dailydelaycostParameter, yearParameter, tranmissionParameter);
        }
    
        public virtual int UpdateClientDetails(Nullable<int> userid, string fullname, string username, string idnumber, Nullable<System.DateTime> birthdate, string gender, string email, string password, string description)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var fullnameParameter = fullname != null ?
                new ObjectParameter("fullname", fullname) :
                new ObjectParameter("fullname", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var idnumberParameter = idnumber != null ?
                new ObjectParameter("idnumber", idnumber) :
                new ObjectParameter("idnumber", typeof(string));
    
            var birthdateParameter = birthdate.HasValue ?
                new ObjectParameter("birthdate", birthdate) :
                new ObjectParameter("birthdate", typeof(System.DateTime));
    
            var genderParameter = gender != null ?
                new ObjectParameter("gender", gender) :
                new ObjectParameter("gender", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateClientDetails", useridParameter, fullnameParameter, usernameParameter, idnumberParameter, birthdateParameter, genderParameter, emailParameter, passwordParameter, descriptionParameter);
        }
    
        public virtual int UpdateEmployeeDetails(Nullable<int> userid, string fullname, string username, string idnumber, Nullable<System.DateTime> birthdate, string gender, string email, string password, string description)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var fullnameParameter = fullname != null ?
                new ObjectParameter("fullname", fullname) :
                new ObjectParameter("fullname", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var idnumberParameter = idnumber != null ?
                new ObjectParameter("idnumber", idnumber) :
                new ObjectParameter("idnumber", typeof(string));
    
            var birthdateParameter = birthdate.HasValue ?
                new ObjectParameter("birthdate", birthdate) :
                new ObjectParameter("birthdate", typeof(System.DateTime));
    
            var genderParameter = gender != null ?
                new ObjectParameter("gender", gender) :
                new ObjectParameter("gender", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateEmployeeDetails", useridParameter, fullnameParameter, usernameParameter, idnumberParameter, birthdateParameter, genderParameter, emailParameter, passwordParameter, descriptionParameter);
        }
    }
}
